{"version":3,"sources":["Components/BrandCard.tsx","Pages/home.tsx","Pages/WorkDesc.tsx","Components/profile.tsx","Pages/about.tsx","ColorModeSwitcher.tsx","routes/routes.tsx","App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["BrandCard","props","borderRadius","h","boxShadow","overflow","src","imageUrl","alt","hoverText","onClick","item","Home","useDisclosure","history","isOpen","onOpen","onClose","React","useRef","useHistory","useState","workData","setWorkData","renderWork","setRenderWork","otherWork","setOtherWork","otherWorkRenderer","setOtherWorkRenderer","setProfileData","onClickBrandCard","workItem","id","brandState","push","useEffect","fetch","then","response","body","json","res","work","main","array","forEach","p","w","title","workItems","length","index","imageSrc","name","fontSize","padding","columns","spacing","as","justifySelf","WorkDesc","location","useLocation","data","setData","projects","setProjects","state","workName","pathname","replace","filter","projectTemp","project","videoUrl","console","log","resp","html","width","height","video","Profile","goTo","link","profile","social","find","className","window","open","url","bio","icon","FaLinkedinIn","FaInstagram","FaVimeoV","image","About","profileData","ColorModeSwitcher","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","variant","color","marginLeft","customHistory","createBrowserHistory","AppRoutes","btnRef","path","render","display","base","md","m","colorScheme","Hamburger","ref","placement","finalFocusRef","align","marginTop","exact","component","theme","extendTheme","config","initialColorMode","useSystemColorMode","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e5ec514f.chunk.js","sourcesContent":["import { Box,Image } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { workItem } from \"../DataModels/baseModels\";\n\ninterface BrandCardProps{\n    imageUrl:string,\n    hoverText:string,\n    item:workItem\n    onClick:(workItem:workItem,id:string) => void\n}\n\nconst BrandCard = (props:BrandCardProps) =>{\n\n    return(\n<Box borderRadius=\"sm\"  h=\"lg\" boxShadow=\"base\" overflow=\"hidden\" >\n<Image src={props.imageUrl} alt={props.hoverText} onClick={()=>props.onClick(props.item,props.hoverText)} />\n</Box>\n    );\n\n\n}\n\nexport default BrandCard;","import { Box, Center,Grid, Hide, useDisclosure, VStack ,HStack, Image} from \"@chakra-ui/react\";\nimport React, { createRef } from \"react\";\nimport { ColorModeSwitcher } from \"../ColorModeSwitcher\";\nimport { Flex, Spacer, Text } from \"@chakra-ui/layout\";\nimport { Button, ButtonGroup, SimpleGrid,Drawer,\n  DrawerBody,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,IconButton } from \"@chakra-ui/react\"\nimport BrandCard from \"../Components/BrandCard\";\n\nimport { HamburgerIcon } from '@chakra-ui/icons'\nimport { useHistory } from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { main, ResponseModel, Work, workItem,otherWork } from \"../DataModels/baseModels\";\nimport Profile from \"../Components/profile\";\nimport { useRef } from \"react\";\n\nconst Home = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const btnRef = React.useRef();\n  let history = useHistory();\n  const [loading,setLoading] = useState(false);\n  const [workData,setWorkData] = useState<workItem[]>()\n  const [renderWork,setRenderWork] = useState<JSX.Element[]>();\n  const [otherWork,setOtherWork] = useState<otherWork[]>();\n  const [otherWorkRenderer,setOtherWorkRenderer] = useState<JSX.Element[]>();\n  const [profile,setProfileData] = useState<main>()\n  const ProfileRef = useRef();\n  const onClickBrandCard = (workItem:workItem,id:string) =>{\n    let brandState = {\n      item:workItem\n    }\n    history.push(`/work/${id}`,brandState);\n  }\n\n  useEffect(() => {\n    fetch(\"https://portfolio-161ec-default-rtdb.firebaseio.com/.json\").then((response) => {\n\n      if(response && response.body){\n        \n        response.json().then((body) => {\n          let res:ResponseModel = body;\n          setWorkData(res.work);\n          setProfileData(res.main);\n          setOtherWork(res.otherWork);\n        })\n\n      }\n    })\n  },[])\n\n  useEffect(()=>{\n    let array:JSX.Element[] = [];\n    if(otherWork){\n      otherWork.forEach(p => {\n        array.push(<Image src={p.imageUrl} w=\"lg\" alt={p.title} />)\n      })\n    }\n    setOtherWorkRenderer(array)\n\n  },[otherWork])\n\n  useEffect(() => {\n    let workItems:JSX.Element[] = [];\n    if(workData  && workData.length>0){\n      workData.forEach((p,index) => {\n        workItems.push(\n          <BrandCard imageUrl={p.imageSrc} hoverText={p.name} item={p} onClick={onClickBrandCard} />\n        )\n      })\n    } \n    setRenderWork(workItems);\n\n  },[workData])\n\n  return (\n    <Box fontSize=\"xl\" padding=\"5\">\n\n      <SimpleGrid p=\"4\" columns={[1, null, 2]} spacing={5}>\n        { renderWork}\n        \n      </SimpleGrid>\n\n     \n        {otherWork && otherWork.length > 0 &&\n        \n           <VStack>\n             <Center>\n        <Text as=\"b\" fontSize=\"3xl\" justifySelf=\"flex-center\">Also Worked with</Text>\n        </Center>\n        <HStack spacing=\"3\">\n          {otherWorkRenderer}\n        \n        </HStack>\n        \n        </VStack>\n      }\n      \n    \n    </Box>\n  );\n}\n\nexport default Home;","import { AspectRatio, Box, Stack, useDisclosure, VStack } from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { VimeoDataModel, workItem } from \"../DataModels/baseModels\";\nimport { Heading } from \"@chakra-ui/react\"\nimport { Flex, Spacer, Text } from \"@chakra-ui/layout\";\nimport { Button, ButtonGroup, SimpleGrid,Drawer,\n  DrawerBody,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,IconButton } from \"@chakra-ui/react\"\nimport { ColorModeSwitcher } from \"../ColorModeSwitcher\";\nimport { HamburgerIcon } from \"@chakra-ui/icons\";\nimport { useEffect } from \"react\";\nimport Vimeo from '@u-wave/react-vimeo';\n \n\n\ninterface WorkState{\n    item:workItem\n}\n\nconst WorkDesc = () =>{\n    let location = useLocation();\n    const [data,setData] = useState<workItem>();\n    const [projects,setProjects] = useState<JSX.Element[]>();\n    useEffect(() => {\n        if(!state?.item){\n            fetch(\"https://portfolio-161ec-default-rtdb.firebaseio.com/work.json\").then((response) => {\n\n                if(response && response.body){\n                  let workName = location.pathname.replace(\"/work/\",\"\");\n                  response.json().then((body) => {\n                    let res:workItem[] = body;\n                    let work =res.filter(p => p.name === workName)\n                    setData(work[0]);\n                  })\n          \n                }\n              })\n        }\n        else{\n            setData(state.item);\n        }\n    },[])\n\n    const {state} = useLocation<WorkState>();\n    const { isOpen, onOpen, onClose } = useDisclosure()\n  const btnRef = React.useRef();\n  let history = useHistory();\n  const [loading,setLoading] = useState(false);\n  const [workData,setWorkData] = useState<workItem[]>()\n  const [renderWork,setRenderWork] = useState<JSX.Element[]>();\n\n  \nuseEffect(() => {\n    let projectTemp:JSX.Element[] = [];\n    if(data)\n    data.projects.forEach(project => {\n        fetch(`https://vimeo.com/api/oembed.json?url=${project.videoUrl}`).then(response => {\n            console.log(response);\n            response.json().then((res) => {\n                let resp:VimeoDataModel = res;\n                console.log(resp.html);\n            })\n        })\n        projectTemp.push(\n            <VStack>\n                <Text as=\"b\" fontSize=\"2xl\" justifySelf=\"flex-start\">{project.title}</Text>\n                \n            <Vimeo width=\"640\" height=\"360\" video={project.videoUrl} />        \n            \n            </VStack>\n        )\n    })\n    setProjects(projectTemp);\n},[data])\n    \n    return(\n        <Box fontSize=\"xl\" padding=\"5\">\n\n      <VStack spacing=\"10\">\n     \n          {projects}\n     \n      </VStack>\n\n    </Box>\n        \n    )\n}\nexport default WorkDesc","import { SimpleGrid, VStack,Image,Box,Center,HStack, IconButton ,Icon} from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { useEffect } from \"react\";\nimport { main } from \"../DataModels/baseModels\";\nimport { Flex, Spacer, Text } from \"@chakra-ui/layout\";\nimport {FaFacebookF,FaLinkedinIn,FaInstagram,FaVimeoV} from 'react-icons/fa';\n\ninterface ProfileProps{\n    profile:main\n}\n\nconst Profile = (props:ProfileProps) =>{\n\n   const goTo = (location:string) => {\n       let link ;\n       debugger;\n       switch(location){\n           case \"LinkedIn\":\n                link = props.profile?.social?.find(p => p?.className ===\"linkedin\");\n               if(link) \n               window.open(link.url);\n               break;\n            case \"instagram\":\n                link = props.profile?.social?.find(p => p?.className ===\"instagram\");\n                if(link) \n               window.open(link.url);\n               break;\n               case \"vimeo\":\n                link = props.profile?.social?.find(p => p?.className ===\"vimeo\");\n                if(link) \n               window.open(link.url);\n               break;  \n       }\n   }\n\n    return(\n        <SimpleGrid p=\"4\" columns={[1, null, 2]} spacing={5}>\n        <Center h=\"2xl\">\n            <VStack>\n            <Text as=\"b\" fontSize=\"3xl\" justifySelf=\"flex-center\">{props.profile.name}</Text>\n            <Text as=\"b\" fontSize=\"2xl\" justifySelf=\"flex-start\">{props.profile.bio}</Text>\n            <HStack spacing=\"3\">\n                <IconButton \n                aria-label = \"Linked In\"\n                onClick = {() => goTo(\"LinkedIn\")}\n                icon={<Icon as={FaLinkedinIn}/>}\n                />\n                <IconButton \n                aria-label = \"Instagram\"\n                onClick = {() => goTo(\"instagram\")}\n                icon={<Icon as={FaInstagram}/>}\n                />\n                 <IconButton \n                aria-label = \"Vimeo\"\n                onClick = {() => goTo(\"vimeo\")}\n                icon={<Icon as={FaVimeoV}/>}\n                />\n            </HStack>\n            </VStack>\n        </Center>\n        <Center h=\"2xl\">\n            <Image src={props.profile.image} h=\"2xl\" alt={\"\"} />\n        </Center>\n      </SimpleGrid>\n\n    );\n\n}\n\nexport default Profile;","import { Box, Drawer, DrawerContent, Flex, SimpleGrid } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport Profile from \"../Components/profile\";\nimport { main } from \"../DataModels/baseModels\";\n\nconst About = () =>{\n    const [profileData,setProfileData] = useState<main>();\n\n    useEffect(() => {\n        fetch(\"https://portfolio-161ec-default-rtdb.firebaseio.com/main.json\").then((response) => {\n\n            if(response && response.body){\n              \n              response.json().then((body) => {\n                let res:main = body;\n    \n                setProfileData(res);\n              })\n      \n            }\n          })\n    },[])\n\n    return(\n        <>\n  \n        {profileData &&\n        <Profile profile = {profileData} />\n        }\n        </>\n    )\n}\n\nexport default About;","import * as React from \"react\"\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/react\"\nimport { FaMoon, FaSun } from \"react-icons/fa\"\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue(\"dark\", \"light\")\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  )\n}\n","import React, { useState } from \"react\";\n\nimport { Router, Route, Switch, useHistory, useLocation } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\n\n//custom imports\nimport Home from \"../Pages/home\";\nimport WorkDesc from \"../Pages/WorkDesc\";\nimport { Box, Button, Drawer, DrawerBody, DrawerCloseButton, DrawerContent, DrawerOverlay, Flex, IconButton, SimpleGrid, Spacer, useColorMode, useColorModeValue, useDisclosure, VStack } from \"@chakra-ui/react\";\nimport About from \"../Pages/about\";\nimport { HamburgerIcon } from \"@chakra-ui/icons\";\nimport { Text } from \"@chakra-ui/layout\";\nimport { ColorModeSwitcher } from \"../ColorModeSwitcher\";\n\n\nconst customHistory = createBrowserHistory();\n\n// Routes For Navigation\nconst AppRoutes = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const btnRef = React.useRef();\n  \n  \n  return (\n    <Router history={customHistory}>\n      <Switch>\n        <Route path = \"/\" render = {props => (\n                <Box fontSize=\"xl\" padding=\"5\">\n\n\n\n\n                <Flex>\n                  <Box p=\"4\">\n                    <Text as=\"b\" fontSize=\"3xl\" justifySelf=\"flex-start\">Raihan Muhimtule</Text>\n                  </Box>\n                  <Spacer />\n                  <Box display={{ base: 'none', md: 'block' }}  p=\"4\" >\n                   \n                    <Button m=\"2\" onClick={()=>customHistory.push(\"/\")} colorScheme=\"teal\" variant=\"ghost\">\n                      Work\n                    </Button>\n                    <Button m=\"2\" colorScheme=\"teal\" onClick={()=>customHistory.push(\"/about\")} variant=\"ghost\">\n                      Contact\n                    </Button>\n                    <ColorModeSwitcher />\n                   \n                  </Box>\n                  <Box display={{ base: 'block', md: 'none' }}  p=\"4\">\n                  <IconButton icon={<HamburgerIcon/>} ref={btnRef} onClick={onOpen}/>\n                 \n                <Drawer\n                  isOpen={isOpen}\n                  placement=\"right\"\n                  onClose={onClose}\n                  finalFocusRef={btnRef}\n                >\n                  <DrawerOverlay />\n                  <DrawerContent>\n                    <DrawerCloseButton />\n                    \n                    <DrawerBody>\n                     <VStack spacing={4}\n                align=\"stretch\" marginTop=\"24\" >\n                    <Button m=\"2\" colorScheme=\"teal\" variant=\"ghost\">\n                      Work\n                    </Button>\n                    <Button m=\"2\" colorScheme=\"teal\" variant=\"ghost\">\n                      Contact\n                    </Button>\n                    <Button  m=\"2\" colorScheme=\"teal\" variant=\"ghost\">\n                      Button\n                    </Button>\n                    \n                    </VStack>\n                    </DrawerBody>\n                \n                    \n                  </DrawerContent>\n                </Drawer>\n                  </Box>\n                </Flex>\n                \n                \n                </Box>\n        )}></Route>\n\n      </Switch>\n      \n        <Switch>\n          <Route exact path=\"/\" component={Home}></Route>\n          <Route exact path=\"/about\" component = {About}></Route>\n          <Route path = \"/work/:id\" component = {WorkDesc}></Route>\n\n        </Switch>\n    \n    </Router>\n  );\n};\n\nexport default AppRoutes;\n","import * as React from \"react\"\nimport {\n  ChakraProvider,\n  extendTheme,\n  ThemeConfig,\n} from \"@chakra-ui/react\"\nimport AppRoutes from \"./routes/routes\"\n\n\nconst config : ThemeConfig = {\n  initialColorMode: \"dark\",\n  useSystemColorMode: false,\n}\n// 3. extend the theme\nconst theme = extendTheme({ config })\nexport const App = () => (\n  <ChakraProvider theme={theme}>\n    <AppRoutes />\n  </ChakraProvider>\n)\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\"\nimport * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { App } from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nimport { extendTheme, ThemeConfig } from \"@chakra-ui/react\"\n// 2. Add your color mode config\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript initialColorMode = {\"dark\"} />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}